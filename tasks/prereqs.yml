---

- name: PREREQ | Install system Packages
  ansible.builtin.package:
      name: "{{ packages }}"
      state: present
  become: true

- name: PREREQ | Install Python Packages
  ansible.builtin.pip:
      name: jmespath
      umask: "0022"
  become: true

- name: PREREQ | See if AWS CLI already exists
  ansible.builtin.stat:
      path: "{{ local_bin_dir }}/aws"
  register: aws_binary
  tags: aws_install

- name: PREREQ | Discover current version already installed
  ansible.builtin.shell: aws --version | awk '{print $1}' | cut -d '/' -f2
  register: aws_cli_installed_ver
  changed_when: false
  when: aws_binary.stat.exists

- name: PREREQ | Download AWS CLI and extract
  ansible.builtin.import_tasks: aws_download.yml
  when:
      - aws_install
      - not aws_binary.stat.exists or aws_cli_upgrade

- name: PREREQ | Ensure install dir and permissions correct
  ansible.builtin.file:
      path: "{{ aws_cli_install_dir }}/v2/{{ aws_cli_extracted_ver }}"
      recurse: true
      state: directory
  become: true

- name: PREREQ | Install AWS CLI
  ansible.builtin.shell: "{{ aws_cli_install_cmd }}"
  become: true
  when:
      - not aws_binary.stat.exists
  tags:
      - aws_install

- name: PREREQ | Upgrade AWS CLI
  ansible.builtin.shell: "{{ aws_cli_upgrade_cmd }}"
  become: true
  when:
      - aws_cli_upgrade
      - aws_cli_extracted_ver.stdout | int > aws_cli_installed_ver.stdout | int
  tags:
      - aws_upgrade

- name: Run aws user setup
  ansible.builtin.import_tasks: aws_user_setup.yml
  tags:
      - aws_user_setup
      - always
